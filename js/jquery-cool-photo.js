/**
 * Modules in this bundle
 * @license
 *
 * cool-photo.js:
 *   license: appleple
 *   author: appleple
 *   homepage: http://developer.a-blogcms.jp
 *   version: 1.0.0
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var coolPhoto = require('../index');
console.log(coolPhoto);

var applyJQuery = function applyJQuery(jQuery) {
	jQuery.fn.coolPhoto = function (settings) {
		if (typeof settings === 'strings') {} else {
			new coolPhoto(this.selector, settings);
		}
		return this;
	};
};

if (typeof define === 'function' && define.amd) {
	define(['jquery'], applyJQuery);
} else {
	var jq = window.jQuery ? window.jQuery : window.$;
	if (typeof jq !== 'undefined') {
		applyJQuery(jq);
	}
}

module.exports = applyJQuery;

},{"../index":3}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dom = require('../lib/dom');
var util = require('../lib/util');

var defaults = {
  classNames: {
    coolPhoto: 'cool-photo',
    coolPhotoClose: 'cool-photo-close',
    coolPhotoBody: 'cool-photo-body',
    coolPhotoInner: 'cool-photo-inner',
    coolPhotoImg: 'cool-photo-img',
    coolPhotoArrows: 'cool-photo-arrows',
    coolPhotoNav: 'cool-photo-nav',
    coolPhotoArrowRight: 'cool-photo-arrow-right',
    coolPhotoArrowLeft: 'cool-photo-arrow-left',
    coolPhotoImgLeft: 'cool-photo-img-left',
    coolPhotoImgRight: 'cool-photo-img-right',
    coolPhotoList: 'cool-photo-list'
  },
  arrows: true,
  nav: true,
  animationSpeed: 300,
  swipeOffset: 100
};

var coolPhoto = function () {
  function coolPhoto(selector, settings) {
    var _this = this;

    _classCallCheck(this, coolPhoto);

    settings = util.extend({}, defaults, settings);
    this.settings = settings;
    this.isSmartPhone = util.isSmartPhone();
    this.currentIndex = 0;
    var index = 0;
    this.elements = document.querySelectorAll(selector);
    [].forEach.call(this.elements, function (element) {
      element.setAttribute('data-index', index);
      index++;
      element.addEventListener('click', function (event) {
        event.preventDefault();
        _this.currentIndex = element.getAttribute('data-index');
        _this.selectedElement = element;
        _this.render();
        _this.dispatchEvent(element);
      });
    });
  }

  _createClass(coolPhoto, [{
    key: 'dispatchEvent',
    value: function dispatchEvent(sibling) {
      var element = sibling.nextElementSibling;
      element.addEventListener('click', this.onClick.bind(this));
      if (this.isSmartPhone) {
        element.addEventListener('touchstart', this.onTouchStart.bind(this));
        element.addEventListener('touchmove', this.onTouchMove.bind(this));
        element.addEventListener('touchend', this.onTouchEnd.bind(this));
      } else {
        element.addEventListener('mousedown', this.onTouchStart.bind(this));
        element.addEventListener('mousemove', this.onTouchMove.bind(this));
        element.addEventListener('mouseup', this.onTouchEnd.bind(this));
      }
    }
  }, {
    key: 'onClick',
    value: function onClick(event) {
      var element = this.selectedElement.nextElementSibling;
      var settings = this.settings;
      var index = this.index;
      var target = event.target;
      if (dom.hasClass(target, settings.classNames.coolPhotoArrowLeft)) {
        var _event = new Event('click');
        this.removeComponent();
        assets[index - 1].element.dispatchEvent(_event);
      } else if (dom.hasClass(target, settings.classNames.coolPhotoArrowRight)) {
        var _event2 = new Event('click');
        this.removeComponent();
        assets[index + 1].element.dispatchEvent(_event2);
      } else if (!dom.hasClass(target, settings.classNames.coolPhotoImg)) {
        this.removeComponent();
      }
    }
  }, {
    key: 'onTouchStart',
    value: function onTouchStart(event) {
      var target = event.target;
      var settings = this.settings;
      if (dom.hasClass(target, settings.classNames.coolPhotoImg)) {
        var pos = this.getTouchPos(event);
        this.isSwipable = true;
        this.pos = { x: 0, y: 0 };
        this.oldPos = pos;
      }
      event.preventDefault();
    }
  }, {
    key: 'onTouchMove',
    value: function onTouchMove(event) {
      var target = event.target;
      var settings = this.settings;
      if (dom.hasClass(target, settings.classNames.coolPhotoImg) && this.isSwipable) {
        var pos = this.getTouchPos(event);
        var x = pos.x - this.oldPos.x;
        this.pos.x += x;
        target.style.transform = 'translateX(' + this.pos.x + 'px)';
        this.oldPos = pos;
      }
      event.preventDefault();
    }
  }, {
    key: 'onTouchEnd',
    value: function onTouchEnd(event) {
      var _this2 = this;

      var element = this.selectedElement.nextElementSibling;
      var settings = this.settings;
      var target = event.target;
      var photoImg = element.querySelector('.' + settings.classNames.coolPhotoImg);
      var nextIndex = this.index;
      var move = false;
      if (!this.isSwipable) {
        return;
      }
      this.isSwipable = false;
      if (this.pos.x < -this.settings.swipeOffset) {
        photoImg.style.transition = 'all .3s';
        setTimeout(function () {
          dom.addClass(photoImg, _this2.settings.classNames.coolPhotoImgRight);
        }, 1);
        move = true;
        nextIndex++;
      } else if (this.pos.x > this.settings.swipeOffset) {
        photoImg.style.transition = 'all .3s';
        setTimeout(function () {
          dom.addClass(photoImg, _this2.settings.classNames.coolPhotoImgLeft);
        }, 1);
        move = true;
        nextIndex--;
      } else if (this.pos.x === 0) {} else {
        photoImg.style.transition = 'all .3s';
        setTimeout(function () {
          photoImg.style.transform = 'translateX(0px)';
        }, 1);
        setTimeout(function () {
          photoImg.style.transition = 'none';
        });
      }
      if (!move) {
        return;
      }
      setTimeout(function () {
        // this.removeComponent();
      }, settings.animationSpeed);
    }
  }, {
    key: 'getTouchPos',
    value: function getTouchPos(e) {
      var x = 0;
      var y = 0;
      if (event && event.originalEvent && event.originalEvent.touches && event.originalEvent.touches[0].pageX) {
        x = event.originalEvent.touches[0].pageX;
        y = event.originalEvent.touches[0].pageY;
      } else if (event.pageX) {
        x = event.pageX;
        y = event.pageY;
      }
      return { x: x, y: y };
    }
  }, {
    key: 'removeComponent',
    value: function removeComponent() {
      var element = this.selectedElement.nextElementSibling;
      var settings = this.settings;
      dom.addClass(element, settings.classNames.coolPhotoClose);
      // element.removeEventListener('click');
      setTimeout(function () {
        dom.remove(element);
      }, settings.animationSpeed);
    }
  }, {
    key: 'render',
    value: function render() {
      var settings = this.settings;
      var index = this.currentIndex;
      var elements = Array.prototype.slice.call(this.elements);
      var element = elements[index];
      var src = element.getAttribute('href');
      var html = '\n\t\t\t<div class="' + settings.classNames.coolPhoto + '">\n\t\t\t\t<div class="' + settings.classNames.coolPhotoBody + '">\n\t\t\t\t\t<div class="' + settings.classNames.coolPhotoInner + '">\n            <ul class="' + settings.classNames.coolPhotoList + '">\n              ' + elements.map(function (element) {
        return '<li><img src="' + element.getAttribute('href') + '" class="' + settings.classNames.coolPhotoImg + '"></li>';
      }).join('') + '\n            </ul>\n\t\t\t\t\t\t' + (settings.arrows ? '\n\t\t\t\t\t\t\t<ul class="' + settings.classNames.coolPhotoArrows + '">\n\t\t\t\t\t\t\t\t' + (index > 0 ? '\n\t\t\t\t\t\t\t\t\t<li class="' + settings.classNames.coolPhotoArrowLeft + '" data-index="' + (index - 1) + '"></li>\n\t\t\t\t\t\t\t\t' : '') + '\n\t\t\t\t\t\t\t\t' + (index !== elements.length - 1 ? '\n\t\t\t\t\t\t\t\t\t<li class="' + settings.classNames.coolPhotoArrowRight + '" data-index="' + (index + 1) + '"></li>\n\t\t\t\t\t\t\t\t' : '') + '\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t' : '') + '\n            ' + (settings.nav ? '\n              <ul class="' + settings.classNames.coolPhotoNav + '">\n                ' + elements.map(function (element) {
        return '<li><img src="' + element.getAttribute('href') + '"></li>';
      }).join('') + '\n              </ul>\n            ' : '') + '\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t';
      element.insertAdjacentHTML('afterend', html);
    }
  }]);

  return coolPhoto;
}();

module.exports = coolPhoto;

},{"../lib/dom":4,"../lib/util":5}],3:[function(require,module,exports){
'use strict';

module.exports = require('./core/');

},{"./core/":2}],4:[function(require,module,exports){
'use strict';

module.exports.addClass = function (element, className) {
	if (element.classList) {
		element.classList.add(className);
	} else {
		if (element.className) {
			element.className += ' ' + className;
		} else {
			element.className = className;
		}
	}
};

module.exports.hasClass = function (element, className) {
	if (element.classList) {
		return element.classList.contains(className);
	} else {
		return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
	}
};

module.exports.remove = function (element) {
	element.parentNode.removeChild(element);
};

},{}],5:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports.isSmartPhone = function () {
  var agent = navigator.userAgent;
  if (agent.indexOf('iPhone') > 0 || agent.indexOf('iPad') > 0 || agent.indexOf('ipod') > 0 || agent.indexOf('Android') > 0) {
    return true;
  } else {
    return false;
  }
};

function deepExtend(out) {
  out = out || {};

  for (var i = 1; i < arguments.length; i++) {
    var obj = arguments[i];

    if (!obj) {
      continue;
    }

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (_typeof(obj[key]) === 'object') out[key] = deepExtend(out[key], obj[key]);else out[key] = obj[key];
      }
    }
  }

  return out;
};

module.exports.extend = deepExtend;

},{}]},{},[1]);
